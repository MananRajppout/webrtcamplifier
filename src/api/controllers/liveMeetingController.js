const Chat = require('../models/chatModel');
const Meeting = require('../models/meetingModel');
const LiveMeeting = require('../models/liveMeetingModel');
const { v4: uuidv4 } = require('uuid');

const startMeeting = async (req, res) => {
  const { user, meetingId } = req.body;

  try {
    // Check if the meeting exists in the Meeting collection
    const existingMeeting = await Meeting.findById(meetingId);

    if (!existingMeeting) {
      return res.status(404).json({ message: "Meeting not found" });
    }

    // Check if a LiveMeeting document already exists for this meeting
    let liveMeeting = await LiveMeeting.findOne({ meetingId: meetingId });

    if (liveMeeting) {
      if (liveMeeting.ongoing) {
        // If the meeting is already ongoing, just return the document
        return res.status(200).json({ message: "Meeting is already in progress", liveMeeting });
      } else {
        // If the meeting exists but is not ongoing, set it to ongoing
        liveMeeting.ongoing = true;
        await liveMeeting.save();
        return res.status(200).json({ message: "Meeting resumed", liveMeeting });
      }
    }

    // If no LiveMeeting document exists, create a new one
    const newLiveMeeting = new LiveMeeting({
      meetingId: meetingId,
      ongoing: true
    });

    await newLiveMeeting.save();

    res.status(201).json({ 
      message: "Live meeting started successfully", 
      liveMeeting: newLiveMeeting 
    });

  } catch (error) {
    console.error("Error starting meeting:", error);
    res.status(500).json({ message: "Error starting meeting", error: error.message });
  }
};

const joinMeetingParticipant = async (req, res) => {
  const { name, role, meetingId } = req.body;
  console.log(name, role, meetingId);

  try {
    const meeting = await Meeting.findById(meetingId);
    if (!meeting) {
      return res.status(404).json({ message: "Meeting not found" });
    }

    let liveMeeting = await LiveMeeting.findOne({ meetingId: meetingId });
    if (!liveMeeting) {
      return res.status(404).json({ message: "Live meeting not found" });
    }

    // Check if the participant is already in the waiting room
    const isInWaitingRoom = liveMeeting.waitingRoom.some(participant => participant.name === name);
    if (isInWaitingRoom) {
      return res.status(400).json({ message: "Participant already in waiting room" });
    }

    // Check if the participant is already in the participants list
    const isInParticipantsList = liveMeeting.participantsList.some(participant => participant.name === name);
    if (isInParticipantsList) {
      return res.status(400).json({ message: "Participant already in the meeting" });
    }

    // If not in either list, add to waiting room
    liveMeeting.waitingRoom.push({ name, role });
    await liveMeeting.save();

    res.status(200).json({ 
      message: "Participant added to waiting room", 
      participant: { name, role }
    });

  } catch (error) {
    console.error("Error joining meeting:", error);
    res.status(500).json({ message: "Error joining meeting", error: error.message });
  }
};

const joinMeetingObserver = async (req, res) => {
  const { name, role, passcode, meetingId } = req.body;
  console.log(name, role, passcode, meetingId);

  try {
    // Check if the meeting exists in the Meeting collection
    const meeting = await Meeting.findById(meetingId);
    if (!meeting) {
      console.log('1')
      return res.status(404).json({ message: "Meeting not found" });
    }

    // Check if the passcode matches
    if (meeting.meetingPasscode !== passcode) {
      console.log('2')
      return res.status(401).json({ message: "Invalid passcode" });
    }

    // Find the corresponding LiveMeeting
    let liveMeeting = await LiveMeeting.findOne({ meetingId: meetingId });
    if (!liveMeeting) {
      console.log('3')
      return res.status(404).json({ message: "Live meeting not found" });
    }

    // Check if the observer is already in the observerList
    const isInObserverList = liveMeeting.observerList.some(observer => observer.name === name);
    if (isInObserverList) {
      console.log('4')
      return res.status(400).json({ message: "Observer already added to the meeting" });
    }

    const observerId = uuidv4();

    // Add the observer to the observerList
    liveMeeting.observerList.push({ name, role, id: observerId }); // The id will be generated by the pre-save middleware
    await liveMeeting.save();

    res.status(200).json({ 
      message: "Observer added to the meeting", 
      observer: { name, role }
    });

  } catch (error) {
    console.error("Error joining meeting as observer:", error);
    res.status(500).json({ message: "Error joining meeting as observer", error: error.message });
  }
};


module.exports = {
  startMeeting, joinMeetingParticipant, joinMeetingObserver
}